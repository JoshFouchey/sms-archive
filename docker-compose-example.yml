version: "3.9"

# Expected directory layout on host (server):
# /opt/stacks/sms-archive/
#   ├── postgres/              (DB_DATA_HOST_PATH)
#   ├── media/messages/        (MEDIA_ROOT_HOST_PATH)
#   └── import/                (optional: place XML exports here)

networks:
  proxy:
    external: true  # Existing reverse proxy network (e.g. nginx proxy manager)
  internal:
    driver: bridge

services:
  db:
    image: postgres:${DB_VERSION}
    container_name: sms-archive-postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      TZ: ${TZ}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ${DB_DATA_HOST_PATH}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sms-archive-app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_URL: jdbc:postgresql://db:5432/${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASSWORD}
      APP_BASE_URL: ${APP_BASE_URL}
      LOG_LEVEL: ${LOG_LEVEL}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      # Spring property smsarchive.media.root resolves from this env var.
      # Keep container path stable (inside image) while host path provides persistence.
      SMSARCHIVE_MEDIA_ROOT: ${SMSARCHIVE_MEDIA_ROOT}
      TZ: ${TZ}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${APP_PORT}:8080"
    volumes:
      # Host bind for persistent media storage (attachments + thumbnails)
      - ${MEDIA_ROOT_HOST_PATH}:${SMSARCHIVE_MEDIA_ROOT}
      # Optional: mount an import folder to upload XML exports directly (adjust/remove if not needed)
      - ${IMPORT_HOST_PATH:-/opt/stacks/sms-archive/import}:/app/import
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 5
    networks:
      - internal
      - proxy

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        VITE_API_BASE: ${VITE_API_BASE}
    container_name: sms-archive-frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      CSP_CONNECT_SRC: ${CSP_CONNECT_SRC}
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "${FRONTEND_PORT}:80"
    healthcheck:
      # Frontend serves on port 80 inside container
      test: ["CMD-SHELL", "curl -fsS -o /dev/null http://127.0.0.1/ || exit 1"]
      interval: 30s
      timeout: 5s
      start_period: 40s
      retries: 3
    networks:
      - internal
      - proxy

# Notes:
# 1. Ensure host directories exist before 'docker compose up':
#      sudo mkdir -p /opt/stacks/sms-archive/postgres /opt/stacks/sms-archive/media/messages /opt/stacks/sms-archive/import
# 2. Permissions: make them writable by the container user (usually root):
#      sudo chown -R root:root /opt/stacks/sms-archive/postgres /opt/stacks/sms-archive/media /opt/stacks/sms-archive/import
# 3. To start fresh: docker compose down -v && rm -rf /opt/stacks/sms-archive/postgres/* /opt/stacks/sms-archive/media/messages/*
